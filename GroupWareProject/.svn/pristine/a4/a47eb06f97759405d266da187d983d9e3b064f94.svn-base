package kr.or.ddit.groupware.controller.memo;

import java.util.List;

import javax.inject.Inject;

import org.apache.commons.io.FileUtils;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;

import kr.or.ddit.groupware.service.attach.IAttachFileService;
import kr.or.ddit.groupware.service.memo.IMemoService;
import kr.or.ddit.groupware.util.FileUtil;
import kr.or.ddit.groupware.util.Result;
import kr.or.ddit.groupware.vo.CustomUser;
import kr.or.ddit.groupware.vo.EmployeeVO;
import kr.or.ddit.groupware.vo.MemoVO;
import lombok.extern.slf4j.Slf4j;

/**
 * 메모 컨트롤러
 * 
 * @author <strong>민경선</strong>
 * @version 1.0
 * @see MemoController
 */
@Slf4j
@Controller
@RequestMapping("/")
public class MemoController {

	@Inject
	private IMemoService memoService;
	@Inject
	private IAttachFileService attachFileService;
	@Inject
	private FileUtil fileUtil;
	
	

	@RequestMapping("/note")
	public String note() {
		return "main/memo";
	}
	

//	@ResponseBody
	@RequestMapping(value = "/addNote", method = RequestMethod.POST)
	public ResponseEntity<String> addNote(@RequestBody MemoVO memoVO) {
		
		
//		 List<String> savedFilePaths = fileUtil.saveUploadFile(files, TableCode.MEMO);
//	        if (savedFilePaths.isEmpty()) {
//	            return new ResponseEntity<>("Failed to upload files", HttpStatus.INTERNAL_SERVER_ERROR);
//	        }
//		
		
		log.info("==================등록실행==================");
		ResponseEntity<String> entity = null;
		log.info(memoVO.toString());

		try {
			// 사용자 정보 가져오기
			Object principal = SecurityContextHolder.getContext().getAuthentication().getPrincipal();

			// 사용자 정보가 CustomUser 객체인지 확인
			if (principal instanceof CustomUser) {
				CustomUser user = (CustomUser) principal;
				EmployeeVO employeeVO = user.getEmployeeVO();

				if (employeeVO != null) {
					memoVO.setEmplNo(employeeVO.getEmplNo());
					Result res = memoService.addMemo(memoVO);
					if (res.equals(Result.OK)) {
						entity = new ResponseEntity<String>("success", HttpStatus.OK);
					}
				}
				else {
					entity = new ResponseEntity<String>("failed", HttpStatus.OK);
				}
			}

		} catch (ClassCastException | NullPointerException ex) {
			log.error("Failed to retrieve user information or process memo addition: {}", ex.getMessage());
			entity = new ResponseEntity<>("failed", HttpStatus.INTERNAL_SERVER_ERROR);
		}

		return entity;

	}
}