package kr.or.ddit.groupware.controller.chat;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.web.socket.CloseStatus;
import org.springframework.web.socket.TextMessage;
import org.springframework.web.socket.WebSocketSession;
import org.springframework.web.socket.handler.BinaryWebSocketHandler;

import com.fasterxml.jackson.databind.ObjectMapper;

import kr.or.ddit.groupware.vo.EmployeeVO;

public class WebSocketHandler extends BinaryWebSocketHandler {

	private static Logger log = LoggerFactory.getLogger(WebSocketHandler.class);

	private ObjectMapper mapper = new ObjectMapper();
	
	private Map<Integer, ArrayList<WebSocketSession>> roomList = new ConcurrentHashMap<>();
	private Map<WebSocketSession, String> userSessionMap = new ConcurrentHashMap<>();
	
	private List<WebSocketSession> sessionList = new ArrayList<>();

	@Override
	protected void handleTextMessage(WebSocketSession session, TextMessage message) {
		String payload = message.getPayload();

		String type = "";

		switch (type) {
		case "ENTER":
			socketEnter();
			break;
		case "LEAVE":
			socketLeave();
			break;
		case "MESSAGE":
			socketMessage();
			break;
		case "UPLOAD":
			socketUpload();
			break;
		}
	}

	private void socketMessage() {

	}

	private void socketEnter() {

	}

	private void socketLeave() {

	}

	private void socketUpload() {

	}

	@Override
	public void afterConnectionEstablished(WebSocketSession session) throws Exception {
		log.info("[CONNECT]");
	}

	@Override
	public void handleTransportError(WebSocketSession session, Throwable ex) throws Exception {
		log.error("[ERROR] : " + ex.getMessage());
	}

	@Override
	public void afterConnectionClosed(WebSocketSession session, CloseStatus status) throws Exception {
		log.info("[DISCONNECT]");
	}
	
	private String getUserId(WebSocketSession session) {
		Map<String,Object> sessionMap = session.getAttributes();
		
		for (String key : sessionMap.keySet()) {
			Object value = sessionMap.get(key);
			log.info("[getUserId_VALUE] : " + value);
		}
		
		EmployeeVO employeeVO = (EmployeeVO) sessionMap.get("SessionInfo");
		
		if (employeeVO == null) {
			return session.getId();
		}else {
			return String.valueOf(employeeVO.getEmplNo());
		}
		
	}
}
