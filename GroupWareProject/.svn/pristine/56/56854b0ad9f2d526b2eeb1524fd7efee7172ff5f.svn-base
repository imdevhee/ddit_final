package kr.or.ddit.groupware.controller.memo;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.io.Resource;
import org.springframework.core.io.UrlResource;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import com.google.common.io.ByteProcessor;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.inject.Inject;

import kr.or.ddit.groupware.service.attach.IAttachFileService;
import kr.or.ddit.groupware.service.memo.IMemoService;
import kr.or.ddit.groupware.util.FileUtil;
import kr.or.ddit.groupware.util.Result;
import kr.or.ddit.groupware.util.TableCode;
import kr.or.ddit.groupware.vo.AttachFileGroupVO;
import kr.or.ddit.groupware.vo.AttachFileVO;
import kr.or.ddit.groupware.vo.CustomUser;
import kr.or.ddit.groupware.vo.EmployeeVO;
import kr.or.ddit.groupware.vo.MemoVO;
import lombok.extern.slf4j.Slf4j;
/**
 * 메모 컨트롤러
 * 
 * @author <strong>민경선</strong>
 * @version 1.0
 * @see MemoController
 */
@Slf4j
@Controller
@RequestMapping("/")
public class MemoController {

	@Inject
	private IMemoService memoService;
	@Inject
	private FileUtil fileUtil;
	@Inject
	private IAttachFileService fileService;
	

	@RequestMapping("/note")
	public String note() {
		return "main/memo";
	}

	/**
	 * 메모등록
	 * 
	 * @author <strong>민경선</strong>
	 * @param VO
	 * @return
	 * 
	 */
	
////	@PreAuthorize("hasRole('ROLE_MEMBER')")
////	CustomUser customUser = (CustomUser) SecurityContextHolder.getContext().getAuthentication().getPrincipal();
////	EmployeeVO employeeVO = customUser.getEmployeeVO();
//	@RequestMapping(value = "/addNote", method = RequestMethod.POST)
//	public ResponseEntity<String> addNote(@RequestBody List<MultipartFile> imgFile,
//			@RequestParam("memoNm") String noteTitle, @RequestParam("memoCn") String noteDescription, MemoVO memoVO) {
//		log.info("===================등록 실행====================");
//		// Save uploaded files and obtain atchFileGroupNo using FileUtil
//		int atchFileGroupNo = fileUtil.saveUploadFile(imgFile, TableCode.MEMO);
//
//		ResponseEntity<String> entity = null;
//		log.info("가져오는지" + atchFileGroupNo);
//		try {
//			// 사용자 정보 가져오기
//			
//			Object principal = SecurityContextHolder.getContext().getAuthentication().getPrincipal();
//
//			// 사용자 정보가 CustomUser 객체인지 확인
//			if (principal instanceof CustomUser) {
//				CustomUser user = (CustomUser) principal;
//				EmployeeVO employeeVO = user.getEmployeeVO();
//
//				if (employeeVO != null) {
//					memoVO.setEmplNo(employeeVO.getEmplNo());
//					memoVO.setAtchFileGrpupNo(atchFileGroupNo); // atchFileGroupNo 설정
//					Result res = memoService.addMemo(memoVO);
//					if (res.equals(Result.OK)) {
//						entity = new ResponseEntity<String>("success", HttpStatus.OK);
//					}
//				}
//				else {
//					entity = new ResponseEntity<String>("failed", HttpStatus.OK);
//				}
//			}
//
//		} catch (ClassCastException | NullPointerException ex) {
//			log.error("Failed to retrieve user information or process memo addition: {}", ex.getMessage());
//			entity = new ResponseEntity<>("failed", HttpStatus.INTERNAL_SERVER_ERROR);
//		}
//
//		return entity;
//
//	}
//	
	 @RequestMapping(value = "/addNote", method = RequestMethod.POST)
	    @ResponseBody
	    public ResponseEntity<Map<String, Object>> addNote(@RequestParam("imgFile") List<MultipartFile> imgFile,
	                                                       @RequestParam("memoNm") String noteTitle,
	                                                       @RequestParam("memoCn") String noteDescription,
	                                                       MemoVO memoVO) {
	        Map<String, Object> response = new HashMap<>();
	        try {
	            // 사용자 인증 정보 가져오기
	            Object principal = SecurityContextHolder.getContext().getAuthentication().getPrincipal();
	            if (!(principal instanceof CustomUser)) {
	                response.put("message", "Authentication failed");
	                return new ResponseEntity<>(response, HttpStatus.UNAUTHORIZED);
	            }

	            CustomUser user = (CustomUser) principal;
	            EmployeeVO employeeVO = user.getEmployeeVO();

	            int atchFileGroupNo = fileUtil.saveUploadFile(imgFile, TableCode.MEMO);
	            memoVO.setEmplNo(employeeVO.getEmplNo());
	            memoVO.setAtchFileGrpupNo(atchFileGroupNo);

	            Result res = memoService.addMemo(memoVO);
	            if (!res.equals(Result.OK)) {
	                response.put("status", "failed");
	                response.put("message", "Failed to add memo");
	                return new ResponseEntity<>(response, HttpStatus.BAD_REQUEST);
	            }

	            // 성공 응답 구성
	            response.put("status", "success");
	            response.put("memoNm", memoVO.getMemoNm());
	            response.put("memoCn", memoVO.getMemoCn());
	            AttachFileGroupVO attachFileGroupVO = fileService.getAttachFileGroup(atchFileGroupNo);
	            AttachFileVO attachFileVO = attachFileGroupVO.getAttachFileList().get(0);
	           
	            response.put("imgFile", attachFileGroupVO); // 클라이언트에 전달할 이미지 메타데이터 정보
	            
	            response.put("imgFilePath", attachFileVO.getAtchFilePath() );
	            return new ResponseEntity<>(response, HttpStatus.OK);
	        } catch (Exception e) {
	            log.error("Error adding memo: {}", e.getMessage());
	            response.put("status", "error");
	            response.put("message", "Server error occurred");
	            return new ResponseEntity<>(response, HttpStatus.INTERNAL_SERVER_ERROR);
	        }
	    }

	   // 이미지 파일 바이너리 데이터 전송을 위한 엔드포인트
	   
//	 	@GetMapping("/images/{attachFileGroupNo}")
//	 	public ResponseEntity<byte[]> serveImage(@PathVariable int attachFileGroupNo) {
//	     try {
//	         // 파일 그룹 정보를 조회
//	         AttachFileGroupVO attachFileGroup = fileService.getAttachFileGroup(attachFileGroupNo);
//	         
//	         // attachFileGroup 내의 파일 리스트를 가져옴
//	         List<AttachFileVO> attachFiles = attachFileGroup.getAttachFileList();
//	         
//	         if (attachFiles == null || attachFiles.isEmpty()) {
//	             return ResponseEntity.notFound().build();
//	         }
//
//	         // 예시에서는 첫 번째 파일을 전송하는 것으로 가정
//	         AttachFileVO file = attachFiles.get(0);
//	         String path = file.getAtchFilePath();
//	         
//	         // FileUtil을 활용하여 파일 전송
//	         return fileUtil.getFileEntity(path, false);
//	     } catch (Exception e) {
//	         e.printStackTrace();
//	         return ResponseEntity.badRequest().build();
//	     }
//	 }


	 @GetMapping("/displayFile")
	 public ResponseEntity<byte[]>displayFile(String path){
		 log.info("path>>>>>>>>>>",path);
		 return fileUtil.getFileEntity(path, false);

	 }
	 
}

	
	
	
	
