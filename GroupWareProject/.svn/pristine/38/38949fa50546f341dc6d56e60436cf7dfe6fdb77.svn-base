package kr.or.ddit.groupware.controller.schedule;

import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.List;

import javax.inject.Inject;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;

import kr.or.ddit.groupware.service.employee.IEmployeeService;
import kr.or.ddit.groupware.service.schedule.IScheduleService;
import kr.or.ddit.groupware.vo.CalendarVO;
import kr.or.ddit.groupware.vo.EmployeeVO;
import kr.or.ddit.groupware.vo.ScheduleVO;

/**
 * 일정 컨트롤러
 * @author <strong>권예은</strong>
 * @version 1.0
 * @see ScheduleController
 */
@Controller
@RequestMapping("/schedule")
public class ScheduleController {
	
	int emplNo = 20240004;
	String deptCode = "D201";
	
	@Inject
	IScheduleService scheduleService;
	
	@Inject
	IEmployeeService emplService;
	
	/**
	 * 캘린더 메인 화면
	 * @author <strong>권예은</strong>
	 * @return 캘린더 메인 페이지
	 */
	@GetMapping("")
	public String calendarMain() {
		return "calendar/main";
	}
	
	/**
	 * 일정 등록 폼 화면
	 * @author <strong>권예은</strong>
	 * @return 일정 등록 페이지
	 */
	@GetMapping("/register")
	public String scheduleForm(Model model) {
		LocalDateTime now = LocalDateTime.now();
		String nowString = now.format(DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm"));
		LocalDateTime afterHour = now.plusHours(1);
		String afterHourString = afterHour.format(DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm"));
		model.addAttribute("now", nowString);
		model.addAttribute("afterHour", afterHourString);
		return "calendar/form";
	}
	
	/**
	 * 로그인된 사용자의 모든 일정 출력
	 * @author <strong>권예은</strong>
	 * @return 로그인 사용자 모든 일정 calendarVO List
	 * @throws JsonProcessingException 
	 */
	@GetMapping(value = "/schdulDetail")
	@ResponseBody
	public String getSchedule(String schdulNo) throws JsonProcessingException {
		
		ScheduleVO schedule = scheduleService.selectScheduleBySchdulNo(schdulNo);
		
		return convertObjectToJsonString(schedule);
	}
	
	/**
	 * 로그인된 사용자의 모든 일정 출력
	 * @author <strong>권예은</strong>
	 * @return 로그인 사용자 모든 일정 calendarVO List
	 * @throws JsonProcessingException 
	 */
	@GetMapping(value = "/getallschdul")
	@ResponseBody
	public String getAllSchedule() throws JsonProcessingException {
		
//		EmployeeVO empl = emplService.selectEmployee(emplNo);
//		String deptCode = empl.getDeptCode();
		
		List<CalendarVO> calendarList = new ArrayList<CalendarVO>();
		
		calendarList = addMyCal(calendarList);
		calendarList = addDeptCal(calendarList);
//		calendarList = addProjectCal(calendarList);
		calendarList = addCompanyCal(calendarList);
		
		return convertObjectToJsonString(calendarList);
	}
	
	/**
	 * 로그인된 사용자의 모든 개인 출력
	 * @author <strong>권예은</strong>
	 * @return 로그인 사용자 개인 일정 calendarVO List
	 * @throws JsonProcessingException 
	 */
	@GetMapping(value = "/getmyschdul")
	@ResponseBody
	public String getMySchedule() throws JsonProcessingException {
		
		List<CalendarVO> calendarList = new ArrayList<CalendarVO>();
		calendarList = addMyCal(calendarList);
		
		return convertObjectToJsonString(calendarList);
	}
	
	/**
	 * 로그인된 사용자의 부서 일정 출력
	 * @author <strong>권예은</strong>
	 * @return 로그인 사용자 부서 일정 calendarVO List
	 * @throws JsonProcessingException 
	 */
	@GetMapping(value = "/getdeptschdul")
	@ResponseBody
	public String getDeptSchedule() throws JsonProcessingException {
		
//		EmployeeVO empl = emplService.selectEmployee(emplNo);
//		String deptCode = empl.getDeptCode();
		
		List<CalendarVO> calendarList = new ArrayList<CalendarVO>();
		calendarList = addDeptCal(calendarList);
		
		return convertObjectToJsonString(calendarList);
	}
	
	/**
	 * 로그인된 사용자의 프로젝트 일정 출력
	 * @author <strong>권예은</strong>
	 * @return 로그인 사용자 프로젝트 일정 calendarVO List
	 * @throws JsonProcessingException 
	 */
	@GetMapping(value = "/getprjctschdul")
	@ResponseBody
	public String getProjectSchedule() throws JsonProcessingException {
		
//		EmployeeVO empl = emplService.selectEmployee(emplNo);
		
		List<CalendarVO> calendarList = new ArrayList<CalendarVO>();
		
//		calendarList = addProjectCal(calendarList);
		
		return convertObjectToJsonString(calendarList);
	}
	
	/**
	 * 사내 일정 출력
	 * @author <strong>권예은</strong>
	 * @return 사내 일정 calendarVO List
	 * @throws JsonProcessingException 
	 */
	@GetMapping(value = "/getcompanyschdul")
	@ResponseBody
	public String getCompanySchedule() throws JsonProcessingException {
		
		List<CalendarVO> calendarList = new ArrayList<CalendarVO>();
		calendarList = addCompanyCal(calendarList);
		
		return convertObjectToJsonString(calendarList);
	}
	
	private List<CalendarVO> addCompanyCal(List<CalendarVO> calendarList) {
		
		List<ScheduleVO> scheduleList = scheduleService.selectCompanyScheduleList();
		for(ScheduleVO scheduleVO : scheduleList) {
			CalendarVO calendar = convertScheduleVOToCalendarVO(scheduleVO);
			calendarList.add(calendar);
		}
		
		return calendarList;
	}

	private List<CalendarVO> addDeptCal(List<CalendarVO> calendarList) {
		
		List<ScheduleVO> scheduleList = scheduleService.selectScheduleListByDeptCode(deptCode);
		for(ScheduleVO scheduleVO : scheduleList) {
			CalendarVO calendar = convertScheduleVOToCalendarVO(scheduleVO);
			calendarList.add(calendar);
		}
		
		return calendarList;
	}

	private List<CalendarVO> addMyCal(List<CalendarVO> calendarList){
		
		List<ScheduleVO> scheduleList = scheduleService.selectScheduleListByEmplNo(emplNo);
		for(ScheduleVO scheduleVO : scheduleList) {
			CalendarVO calendar = convertScheduleVOToCalendarVO(scheduleVO);
			calendarList.add(calendar);
		}
		
		return calendarList;
	}
	
	/**
	 * scheduleVO를 풀캘린더를 위한 CalendarVO로 변환
	 * @author <strong>권예은</strong>
	 * @param scheduleVO
	 * @return
	 */
	private CalendarVO convertScheduleVOToCalendarVO(ScheduleVO scheduleVO) {
		CalendarVO calendar = new CalendarVO();
		
		calendar.setId(""+scheduleVO.getSchdulNo());
		calendar.setTitle(scheduleVO.getSchdulNm());
		if(scheduleVO.getAlldayYn().equals("Y")) {
			calendar.setAllDay(true);
		}else {
			calendar.setAllDay(false);
			calendar.setEnd(scheduleVO.getSchdulEndde());
		}
		calendar.setStart(scheduleVO.getSchdulBgnde());
		calendar.setBackgroundColor(scheduleVO.getSchdulBgrnColor());
		calendar.setColor(scheduleVO.getSchdulBgrnColor());
		calendar.setTextColor(scheduleVO.getSchdulFontColor());
		
		return calendar;
	}
	
	private String convertObjectToJsonString(Object obj) throws JsonProcessingException {
		
        ObjectMapper objectMapper = new ObjectMapper();
        String calendarJson = objectMapper.writeValueAsString(obj);
		
		return calendarJson;
		
	}

}
