package kr.or.ddit.groupware.controller.chat;

import java.util.List;

import javax.inject.Inject;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.multipart.MultipartFile;

import com.fasterxml.jackson.databind.ObjectMapper;

import kr.or.ddit.groupware.service.chat.IChatService;
import kr.or.ddit.groupware.service.employee.IEmployeeService;
import kr.or.ddit.groupware.util.FileUtil;
import kr.or.ddit.groupware.util.TableCode;
import kr.or.ddit.groupware.vo.ChatListVO;
import kr.or.ddit.groupware.vo.CustomUser;
import kr.or.ddit.groupware.vo.EmployeeEstbsVO;
import kr.or.ddit.groupware.vo.EmployeeVO;
import kr.or.ddit.groupware.vo.MessageGroupParticipantVO;
import kr.or.ddit.groupware.vo.MessageVO;

/**
 * 채팅 컨트롤러
 * @author <strong>이명문</strong>
 * @version 1.0
 * @see ChatController
 */
@Controller
@RequestMapping("/chat")
public class ChatController {
	
	@Inject
	private IChatService chatService;
	
	@Inject
	private IEmployeeService employeeService;
	
	@Inject
	private FileUtil fileUtil;
	
	private ObjectMapper mapper = new ObjectMapper();

	@GetMapping("")
	public String chat(Model model) {
		CustomUser customUser = (CustomUser) SecurityContextHolder.getContext().getAuthentication().getPrincipal();
		EmployeeVO employeeVO = customUser.getEmployeeVO();
		
		EmployeeEstbsVO estbsVO = new EmployeeEstbsVO();
		estbsVO.setEmplNo(employeeVO.getEmplNo());
		estbsVO.setEstbsTypeCode("3");
		estbsVO = employeeService.selectEstbsByEmplNo(estbsVO);
		
		model.addAttribute("employee", employeeVO);
		model.addAttribute("estbs", estbsVO);
		return "main/chat";
	}
	
	@GetMapping(value = "/chatlist", produces = "application/json; charset=UTF-8")
	public ResponseEntity<String> getChatList(int emplNo) throws Exception {
		List<ChatListVO> chatList = chatService.selectChatList(emplNo);
		return chatList == null ? 
			ResponseEntity.status(HttpStatus.NOT_FOUND).body("failed") :
			ResponseEntity.status(HttpStatus.OK).body(mapper.writeValueAsString(chatList));
	}
	
	@GetMapping(value = "/talklist", produces = "application/json; charset=UTF-8")
	public ResponseEntity<String> getTalkList(int emplNo) throws Exception {
		List<ChatListVO> talkList = chatService.selectTalkList(emplNo);
		return talkList == null ? 
			ResponseEntity.status(HttpStatus.NOT_FOUND).body("failed") :
			ResponseEntity.status(HttpStatus.OK).body(mapper.writeValueAsString(talkList));
	}
	
	@GetMapping(value = "/talk/{emplNo}", produces = "application/json; charset=UTF-8")
	public ResponseEntity<String> getTalk(@PathVariable int emplNo) throws Exception {
		MessageGroupParticipantVO groupParticipantVO = chatService.selectTalk(emplNo);
		return groupParticipantVO == null ? 
			ResponseEntity.status(HttpStatus.NOT_FOUND).body("failed") :
			ResponseEntity.status(HttpStatus.OK).body(mapper.writeValueAsString(groupParticipantVO));
	}
	
	@GetMapping(value = "/talk/history/{groupNo}", produces = "application/json; charset=UTF-8")
	public ResponseEntity<String> getTalkHistory(@PathVariable int groupNo) throws Exception {
		List<MessageVO> messageList = chatService.selectTalkHistory(groupNo);
		return messageList == null ? 
			ResponseEntity.status(HttpStatus.NOT_FOUND).body("failed") :
			ResponseEntity.status(HttpStatus.OK).body(mapper.writeValueAsString(messageList));
	}
	
	@PostMapping("/talk/file")
	public ResponseEntity<String> talkImageUpload(List<MultipartFile> files) throws Exception {
		int groupNo = fileUtil.saveUploadFile(files, TableCode.MESSAGE);
		return groupNo == 0 ? 
			ResponseEntity.status(HttpStatus.NOT_FOUND).body(null) :
			ResponseEntity.status(HttpStatus.OK).body(String.valueOf(groupNo));
	}
	
	@GetMapping("/displayFile")
	public ResponseEntity<byte[]> displayFile(String path) {
		return fileUtil.getFileEntity(path, false);
	}
	
	@GetMapping("/download")
	public ResponseEntity<byte[]> downloadFile(String path) {
		return fileUtil.getFileEntity(path, true);
	}
	
	@PostMapping("/create")
	public ResponseEntity<String> createChatGroup(@RequestBody String obj) {
		int groupNo = chatService.createChatGroup(obj);
		return ResponseEntity.status(HttpStatus.OK).body(String.valueOf(groupNo));
	}
}
