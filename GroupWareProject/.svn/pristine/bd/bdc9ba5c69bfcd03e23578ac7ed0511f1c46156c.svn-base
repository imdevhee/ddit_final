package kr.or.ddit.groupware.controller.project;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.inject.Inject;

import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.fasterxml.jackson.core.JsonProcessingException;
//import com.itextpdf.text.pdf.PdfStructTreeController.returnType;

import kr.or.ddit.groupware.service.employee.IEmployeeService;
import kr.or.ddit.groupware.service.project.IProjectService;
import kr.or.ddit.groupware.service.project.ITaskService;
import kr.or.ddit.groupware.service.schedule.IScheduleService;
import kr.or.ddit.groupware.util.JsonObjectUtil;
import kr.or.ddit.groupware.vo.CustomUser;
import kr.or.ddit.groupware.vo.EmployeeVO;
import kr.or.ddit.groupware.vo.PrjctSchdulVO;
import kr.or.ddit.groupware.vo.ProjectVO;
import kr.or.ddit.groupware.vo.ScheduleVO;
import kr.or.ddit.groupware.vo.TaskVO;

/**
 * 프로젝트 컨트롤러
 *  업무일지 일감 등
 * @author <strong>권예은</strong>
 * @version 1.0
 * @see ProjectController
 */

@Controller
@RequestMapping("/project")
public class ProjectController {
	
	@Inject
	private IProjectService projectService;
	
	@Inject
	private ITaskService taskService;
	
	@Inject
	IScheduleService scheduleService;
	
	@Inject
	IEmployeeService emplService;

	CustomUser customUser;
	EmployeeVO loginUser;

	/**
	 * 프로젝트 탭 진입 시 보이는 프로젝트 홈
	 * @param model
	 * @return
	 */
	@GetMapping("")
	public String projectHome(Model model) {
		
		customUser = (CustomUser) SecurityContextHolder.getContext().getAuthentication().getPrincipal();
		loginUser = customUser.getEmployeeVO();
		
		List<ProjectVO> prjctList = projectService.selectAvailableProjectListByEmplNo(loginUser.getEmplNo());
		List<TaskVO> todoTaskList = taskService.selectOngoingTaskListByEmplNo(loginUser.getEmplNo(),"todo");
		List<TaskVO> inProgressTaskList = taskService.selectOngoingTaskListByEmplNo(loginUser.getEmplNo(),"inProgress");
		List<TaskVO> doneTaskList = taskService.selectOngoingTaskListByEmplNo(loginUser.getEmplNo(),"done");
		List<PrjctSchdulVO> prjctSchdulList = projectService.selectprjctSchdulListByemplNo(loginUser.getEmplNo());
		
		model.addAttribute("prjctList", prjctList);
		model.addAttribute("todoTaskList", todoTaskList);
		model.addAttribute("inProgressTaskList", inProgressTaskList);
		model.addAttribute("doneTaskList", doneTaskList);
		model.addAttribute("prjctSchdulList", prjctSchdulList);
		
		return "project/home";
	}
	
	/**
	 * 일감 상세 정보 Ajax
	 * @param taskNo
	 * @return
	 * @throws JsonProcessingException
	 */
	@GetMapping("/taskDetail")
	@ResponseBody
	public String getTaskDetail(int taskNo) throws JsonProcessingException {
		int emplNo = loginUser.getEmplNo();
		Map<String, Object> map = new HashMap<String, Object>();
		map.put("emplNo", emplNo);
		map.put("taskNo", taskNo);
		TaskVO taskVO = taskService.selectTaskByTaskNo(map);
		return JsonObjectUtil.convertObjectToJsonString(taskVO);
	}
	
	/**
	 * 프로젝트 메인 페이지
	 * @param prjctNo
	 * @return
	 */
	@GetMapping("/main")
	public String projectMain(int prjctNo, Model model) {
		List<ProjectVO> prjctList = projectService.selectAvailableProjectListByEmplNo(loginUser.getEmplNo());
		model.addAttribute("prjctList", prjctList);
		List<TaskVO> taskList = taskService.selectTaskListByPrjctNo(prjctNo);
		return "project/main";
	}
	
	@GetMapping("/project")
	public String projectMain(Model model, ProjectVO project) {
		
		List<TaskVO> taskList = taskService.getTaskListByProject(project);
		return "";
	}
	
	/**
	 * 해당 사원이 참여중인 프로젝트 목록 (대기, 진행중만)
	 * @param emplNo
	 * @return
	 * @throws JsonProcessingException 
	 */
	@GetMapping("/my")
	public String getMyAvailableProject(int emplNo) throws JsonProcessingException {
		List<ProjectVO> myProjectList = projectService.selectAvailableProjectListByEmplNo(emplNo);
		return JsonObjectUtil.convertObjectToJsonString(myProjectList);
	}
	
	private List<ProjectVO> getOnesAllProjects(int emplNo){
		return projectService.selectProjectListByEmplNo(emplNo);
	}
	
}
