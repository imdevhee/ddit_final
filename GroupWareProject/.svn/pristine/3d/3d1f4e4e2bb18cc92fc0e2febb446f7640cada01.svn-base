package kr.or.ddit.groupware.controller.addressbook;

import java.util.List;

import javax.inject.Inject;

import org.apache.commons.lang3.StringUtils;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;

import kr.or.ddit.groupware.service.addressbook.IAddressBookService;
import kr.or.ddit.groupware.util.Result;
import kr.or.ddit.groupware.vo.AddressBookVO;
import kr.or.ddit.groupware.vo.CustomUser;
import kr.or.ddit.groupware.vo.EmployeeVO;
import kr.or.ddit.groupware.vo.PaginationInfoVO;
import lombok.extern.slf4j.Slf4j;

/**
 * 주소록 컨트롤러
 * 
 * @author <strong>이영주</strong>
 * @version 1.0
 * @see AddressBookController
 */
@Slf4j
@Controller
@RequestMapping("/address")
public class AddressBookController {

	@Inject
	private IAddressBookService addressService;

//	@Inject
//	private IEmployeeService employeeService;

	/**
	 * 주소록 리스트 출력
	 * 
	 * @author <strong>이영주</strong>
	 * @param model
	 * @return
	 */
	@GetMapping("/addressbook")
	public String selectAddressList(Model model) {

		return "address/addressList";
	}

	/**
	 * 주소록 사원리스트 출력
	 * 
	 * @author <strong>이영주</strong>
	 * @param model 보여줄 사원주소록 데이터
	 * @return 주소록 사원리스트
	 */
	@GetMapping(value = "/employeeAddressList")
	public String selectEmployeeAddressList(
			@RequestParam(name = "page", required = false, defaultValue = "1") int currentPage,
			@RequestParam(required = false, defaultValue = "all") String searchType,
			@RequestParam(required = false) String searchWord, Model model) {
//		CustomUser customUser = (CustomUser) SecurityContextHolder.getContext().getAuthentication().getPrincipal();
//		EmployeeVO employeeVO = customUser.getEmployeeVO();
//
//		int emplNo = employeeVO.getEmplNo(); // 사원번호 가져오기
		int emplNo = 20240061;
		/**
		 * 페이징
		 */
		PaginationInfoVO<AddressBookVO> pagingVO = new PaginationInfoVO<AddressBookVO>();
		pagingVO.setEmplNo(emplNo);
		// 검색이 이뤄지면 아래가 실행됨
		// 검색이 이뤄졌다는 걸 정확하게 확인하기 위해서는 searchWord가 비어있지 않을 때
		if (StringUtils.isNotBlank(searchWord)) {
			pagingVO.setSearchType(searchType);
			pagingVO.setSearchWord(searchWord);
			model.addAttribute("searchType", searchType);
			model.addAttribute("searchWord", searchWord);
		}

		// startRow, endRow, startPage, endPage를 설정
		pagingVO.setCurrentPage(currentPage);

		// totalRecord라는 총 게시글 수
		int totalRecord = addressService.totalEmployeeCnt(pagingVO);
		pagingVO.setTotalRecord(totalRecord); // totalPage 설정

		List<AddressBookVO> dataList = addressService.selectEmployeeAddressList(pagingVO);
		pagingVO.setDataList(dataList);

		model.addAttribute("pagingVO", pagingVO);
//////////////////////////////////////////////////////////////////////////////////////////////
		
		
//		List<AddressBookVO> employeeAdList = addressService.selectEmployeeAddressList(emplNo);
//		int totalEmployeeCnt = addressService.totalEmployeeCnt(emplNo);
		List<AddressBookVO> addressGrpList = addressService.selectAddressGrpList(emplNo);

		model.addAttribute("addressGrpList", addressGrpList);
		
//		model.addAttribute("employeeAdList", employeeAdList);
//		model.addAttribute("totalEmployeeCnt", totalEmployeeCnt);


		return "address/employeeAddressList";
	}

	/**
	 * 주소록 메인(개인주소록) 출력
	 * 
	 * @author <strong>이영주</strong>
	 * @param model
	 * @param 특정사원의 주소록 그룹과 그 그룹에 있는 사람들
	 * @return 주소록 메인페이지(개인주소록)
	 */
	@GetMapping("/addresstable")
	public String addressTable(Model model, AddressBookVO addressBookVO) {

//		CustomUser customUser = (CustomUser) SecurityContextHolder.getContext().getAuthentication().getPrincipal();
//		EmployeeVO employeeVO = customUser.getEmployeeVO();
//
//		int emplNo = employeeVO.getEmplNo(); // 사원번호 가져오기
		
		int emplNo = 20240061; // 하드코딩

		// 이 사원의 그룹리스트 가져오기
		List<AddressBookVO> addressGrpList = addressService.selectAddressGrpList(emplNo);
		
		// 이 사원의 가장 위에 있는 그룹넘버
		Integer grpNo = addressService.selectGrpNo(emplNo);

		// grpNo가 null이 아니고 0이 아닌 경우에만 리스트를 가져옴
		List<AddressBookVO> selectPersonalList = null;
		if (grpNo != null && grpNo != 0) {
		    // 그룹에 들어있는 사람들 리스트 가져오기
		    selectPersonalList = addressService.selectPersonalList(grpNo);
		}
		
		
		model.addAttribute("addressGrpList", addressGrpList);
		model.addAttribute("selectPersonalList", selectPersonalList);
		
		
		return "address/addressTable";
	}
	

	

	/**
	 * 
	 * 주소록 외부인원 인서트
	 * 
	 * @author <strong>이영주</strong>
	 * @param addressBookVO
	 * @return 인서트 후 화면
	 */
	@PostMapping("/insertAddress")
	public ResponseEntity<String> insertAddress(@RequestBody AddressBookVO addressBookVO) {
		
//		CustomUser customUser = (CustomUser) SecurityContextHolder.getContext().getAuthentication().getPrincipal();
//		EmployeeVO employeeVO = customUser.getEmployeeVO();
//
//		int emplNo = employeeVO.getEmplNo(); // 사원번호 가져오기
		
		// 넣는 사람의 사원번호	하드코딩
		int emplNo = 20240061;	

		addressBookVO.setEmplNo(emplNo);

		log.info("넘겨받은 값: " + addressBookVO.getAdbkEmail());

		Result result = addressService.insertAddress(addressBookVO);

		if (result.equals(Result.OK)) {
			return new ResponseEntity<String>("OK", HttpStatus.OK);
		}
		else {
			return new ResponseEntity<String>("FAILED", HttpStatus.OK);
		}
	}

	/**
	 * 주소록 수정
	 * 
	 * @author <strong>이영주</strong>
	 * @param addressBookVO
	 * @return 수정 후 페이지
	 */
	@PostMapping("/updateEmplAddress")
	public ResponseEntity<String> updateEmplAddress(@RequestBody AddressBookVO addressBookVO) {

		int result = addressService.updateEmplAddress(addressBookVO);

		if (result > 0) {
			return new ResponseEntity<String>("OK", HttpStatus.OK);
		}
		else {
			return new ResponseEntity<String>("FAILED", HttpStatus.OK);
		}
	}

}
