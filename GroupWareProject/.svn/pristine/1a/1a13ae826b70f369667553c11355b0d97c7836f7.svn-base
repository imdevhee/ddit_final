package kr.or.ddit.groupware.service.mail;

import java.util.List;

import javax.inject.Inject;

import org.springframework.stereotype.Service;

import kr.or.ddit.groupware.mapper.mail.IMailMapper;
import kr.or.ddit.groupware.util.Result;
import kr.or.ddit.groupware.vo.EmailReceptionVO;
import kr.or.ddit.groupware.vo.EmailVO;
import kr.or.ddit.groupware.vo.PaginationInfoVO;

/**
 * 메일 서비스 구현체
 * @author <strong>최소희</strong>
 * @version 1.0
 * @see MailServiceImpl
 */
@Service
public class MailServiceImpl implements IMailService {

	@Inject
	private IMailMapper mapper;

	@Override
	public EmailVO selectEmail(int emailNo) {
		return mapper.selectEmail(emailNo);
	}

	@Override
	public Result deleteEmail(int emailNo) {
		Result result = null;
		int status = mapper.deleteEmail(emailNo);
		if(status > 0) {
			result = Result.OK;
		}else {
			result = Result.FAILED;
		}
		return result;
	}

	@Override
	public Result deleteReception(int emailNo) {
		Result result = null;
		int status = mapper.deleteReception(emailNo);
		if(status > 0) {
			result = Result.OK;
		}else {
			result = Result.FAILED;
		}
		return result;
	}

	@Override
	public int selectEmailCount(PaginationInfoVO<EmailVO> pagingVO) {
		return mapper.selectEmailCount(pagingVO);
	}

	@Override
	public List<EmailVO> selectEmailList(PaginationInfoVO<EmailVO> pagingVO) {
		return mapper.selectEmailList(pagingVO);
	}

	@Override
	public int selectNoReadCount(int emplNo) {
		return mapper.selectNoReadCount(emplNo);
	}

	@Override
	public Result readEmail(int emailNo) {
		Result result = null;
		int status = mapper.readEmail(emailNo);
		if(status > 0) {
			result = Result.OK;
		}else {
			result = Result.FAILED;
		}
		return result;
	}

	@Override
	public Result importantEmail(int emailNo) {
		Result result = null;
		int status = mapper.importantEmail(emailNo);
		if(status > 0) {
			result = Result.OK;
		}else {
			result = Result.FAILED;
		}
		return result;
	}

	@Override
	public Result importantReception(int emailNo) {
		Result result = null;
		int status = mapper.importantReception(emailNo);
		if(status > 0) {
			result = Result.OK;
		}else {
			result = Result.FAILED;
		}
		return result;
	}

	@Override
	public int selectSentCount(PaginationInfoVO<EmailVO> pagingVO) {
		return mapper.selectSentCount(pagingVO);
	}

	@Override
	public List<EmailVO> selectSentList(PaginationInfoVO<EmailVO> pagingVO) {
		return mapper.selectSentList(pagingVO);
	}

	@Override
	public List<EmailReceptionVO> selectReceptionList(int emailNo) {
		return mapper.selectReceptionList(emailNo);
	}

	@Override
	public List<EmailVO> selectNoReadList(PaginationInfoVO<EmailVO> pagingVO) {
		return mapper.selectNoReadList(pagingVO);
	}

	@Override
	public int selectImportantCount(PaginationInfoVO<EmailVO> pagingVO) {
		return mapper.selectImportantCount(pagingVO);
	}

	@Override
	public List<EmailVO> selectImportantList(PaginationInfoVO<EmailVO> pagingVO) {
		return mapper.selectImportantList(pagingVO);
	}

	@Override
	public int selectImportantNoReadCount(int emplNo) {
		return mapper.selectImportantNoReadCount(emplNo);
	}
}
