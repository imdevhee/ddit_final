package kr.or.ddit.groupware.controller.addressbook;

import java.util.Iterator;
import java.util.List;

import javax.inject.Inject;
import javax.servlet.http.HttpSession;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import kr.or.ddit.groupware.service.addressbook.IAddressBookService;
import kr.or.ddit.groupware.util.Result;
import kr.or.ddit.groupware.vo.AddressBookVO;
import lombok.extern.slf4j.Slf4j;

/**
 * 주소록 컨트롤러
 * 
 * @author <strong>이영주</strong>
 * @version 1.0
 * @see AddressBookController
 */
@Slf4j
@Controller
@RequestMapping("/address")
public class AddressBookController {
	
	@Inject
	private IAddressBookService addressService;
	
//	@Inject
//	private IEmployeeService employeeService;
	
	
	/**
	 * 주소록 리스트 출력
	 * 
	 * @author <strong>이영주</strong>
	 * @param model
	 * @return
	 */
	@GetMapping("/addressbook")
	public String selectAddressList(Model model) {

		return "address/addressList";
	}

	/**
	 * 주소록 사원리스트 출력
	 * 
	 * @author <strong>이영주</strong>
	 * @param model 보여줄 사원주소록 데이터 
	 * @return 주소록 사원리스트
	 */
	
	@GetMapping(value = "/employeeAddressList")
	public String selectEmployeeAddressList(Model model) {
		int emplNo = 20240061; // 하드코딩
		
		List<AddressBookVO> employeeAdList = addressService.selectEmployeeAddressList(emplNo);
		int totalEmployeeCnt = addressService.totalEmployeeCnt(emplNo);
		List<AddressBookVO> addressGrpList = addressService.selectAddressGrpList(emplNo);
		
		
		
		model.addAttribute("addressGrpList", addressGrpList);
		model.addAttribute("employeeAdList", employeeAdList);
		model.addAttribute("totalEmployeeCnt", totalEmployeeCnt);
		
		System.out.println(addressGrpList);
		
		return "address/employeeAddressList";
	}
	
	
	
	/**
	 * 주소록 메인(개인주소록) 출력
	 * 
	 * @author <strong>이영주</strong>
	 * @param model
	 * @param 특정사원의 주소록 그룹과 그 그룹에 있는 사람들
	 * @return 주소록 메인페이지(개인주소록)
	 */
	@GetMapping("/addresstable")
	public String addressTable(Model model, AddressBookVO addressBookVO) {
		
		int emplNo = 20240061;	// 하드코딩 
		
		//이 사원의 그룹리스트 가져오기
		List<AddressBookVO> addressGrpList = addressService.selectAddressGrpList(emplNo);
		
		model.addAttribute("addressGrpList", addressGrpList);
		
		return "address/addressTable";
	}
	
	/**
	 * 
	 * 주소록 외부인원 인서트
	 * 
	 * @author <strong>이영주</strong>
	 * @param addressBookVO
	 * @return
	 */
	@PostMapping("/insertAddress")
	public ResponseEntity<String> insertAddress(@RequestBody AddressBookVO addressBookVO){
		
		// 넣는 사람의 사원번호 
		int emplNo = 20240061;
		
		addressBookVO.setEmplNo(emplNo);
		
		log.info("넘겨받은 값: " +addressBookVO.getAdbkEmail());
		
		
		Result result = addressService.insertAddress(addressBookVO);
				
		if(result.equals(Result.OK)) {
			return new ResponseEntity<String> ("OK", HttpStatus.OK);
		}else {
			return new ResponseEntity<String> ("FAILED", HttpStatus.OK);
		}
	}
	
	
	/**
	 * 주소록 수정
	 * 
	 * @author <strong>이영주</strong>
	 * @param addressBookVO
	 * @return
	 */
	@PostMapping("/updateEmplAddress")
	public ResponseEntity<String> updateEmplAddress(@RequestBody AddressBookVO addressBookVO){
		
		int result = addressService.updateEmplAddress(addressBookVO);
				
		if(result > 0) {
			return new ResponseEntity<String> ("OK", HttpStatus.OK);
		}else {
			return new ResponseEntity<String> ("FAILED", HttpStatus.OK);
		}
	}

}
