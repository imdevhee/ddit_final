package kr.or.ddit.groupware.controller.documents;

import java.util.List;

import javax.inject.Inject;

import org.springframework.http.MediaType;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;

import kr.or.ddit.groupware.service.documents.IDocumentsService;
import kr.or.ddit.groupware.util.Result;
import kr.or.ddit.groupware.vo.CustomUser;
import kr.or.ddit.groupware.vo.DocumentsVO;
import kr.or.ddit.groupware.vo.EmployeeVO;

@Controller
@RequestMapping("/documents")
public class DocumentsController {

	@Inject
	private IDocumentsService documentsService;
	
	ObjectMapper mapper = new ObjectMapper();
	
	/**
	 * @method : selectDocumentsList
	 * @auther : <strong>이명문</strong>
	 * @return : JSON 형식의 documentsList
	 * @date : 2024. 4. 17
	 */
	@ResponseBody
	@GetMapping(value = "/doclist", produces = MediaType.APPLICATION_JSON_VALUE)
	public String selectDocumentsList() throws Exception {
		List<DocumentsVO> documentsList = documentsService.selectDocumentsList();
		return mapper.writeValueAsString(documentsList);
	}
	
	
	/**
	 * @method : docListView 문서양식 메인 리스트 뷰 
	 * @auther : <strong>이영주</strong>
	 * @param :
	 * @return :
	 * @date : 2024. 4. 22
	 *
	 */
	@GetMapping("/list")
	public String docListView() {
		
		return "documents/documentslist";
	}
	
	
	/**
	 * @method : selectDocList
	 * @auther : <strong>이영주</strong>
	 * @param :
	 * @return :
	 * @date : 2024. 4. 22
	 *
	 */
	@ResponseBody
	@GetMapping(value = "/selectdoclist", produces = MediaType.APPLICATION_JSON_VALUE)
	public String selectDocList() throws Exception {
		List<DocumentsVO> docList = documentsService.selectDocList();
		return mapper.writeValueAsString(docList);
	}
	
	
	
	/**
	 * @method : insertDocFormView 문서양식 인서트화면출력
	 * @auther : <strong>이영주</strong>
	 * @param : 
	 * @return : 문서양식 인서트 화면 
	 * @date : 2024. 4. 22
	 *
	 */
	@GetMapping("/insertdocform")
	public String insertDocFormView() {
		return "documents/documentsinsert";
	}
	/**
	 * @method : insertDocuments
	 * @auther : <strong>이영주</strong>
	 * @param :
	 * @return :
	 * @date : 2024. 4. 22
	 *
	 */
	@PostMapping("/insertdocform")
	public String insertDocuments(DocumentsVO docVO,Model model) {
		CustomUser customUser = (CustomUser) SecurityContextHolder.getContext().getAuthentication().getPrincipal();
		EmployeeVO userVO = customUser.getEmployeeVO(); 
		int emplNo = userVO.getEmplNo();
		
		docVO.setDocRegister(emplNo);					//사원번호
		docVO.setDocTypeCode(docVO.getDocTypeCode());	//분류코드
		String goPage = "";
		
		Result result = documentsService.insertDocform(docVO);
		if(result.equals(Result.OK)) {
			goPage = "redirect:list";
		}else {
			goPage = "documents/list"; //바꿔야 
		}
		return goPage;
	}
}
